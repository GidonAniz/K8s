Pod Design Questions: • Understand how to use Labels, Selectors and Annotations • Understand Deployments and how to perform rolling updates • Understand Deployments and how to perform rollbacks • Understand Jobs and CronJobs 

1. Type the command for:  Get pods with label information 
  kubectl get pods --show-labels

2. Create 5 nginx pods in which two of them is labeled env=prod and three of them is labeled env=dev 
  kubectl run nginx-prod-1 --image=nginx --labels=env=prod --restart=Never
  kubectl run nginx-prod-2 --image=nginx --labels=env=prod --restart=Never
  kubectl run nginx-dev-1 --image=nginx --labels=env=dev --restart=Never
  kubectl run nginx-dev-2 --image=nginx --labels=env=dev --restart=Never
  kubectl run nginx-dev-3 --image=nginx --labels=env=dev --restart=Never


3. Verify all the pods are created with correct labels 
  kubectl describe pods

4. Get the pods with label env=dev 
  kubectl get pods -l env=dev

5. Get the pods with label env=dev and also output the labels 
  kubectl get pods -l env=dev --show-labels

6. Get the pods with label env=prod 
  kubectl get pods -l env=prod

7. Get the pods with label env=prod and also output the labels 
  kubectl get pods -l env=prod --show-labels

8. Get the pods with label env 
  kubectl get pods --selector=env

9. Get the pods with labels env=dev and env=prod 
  kubectl get pods -l 'env in (dev, prod)'

10. Get the pods with labels env=dev and env=prod and output the labels as well 
  kubectl get pods -l 'env in (dev,prod)' --show-labels

11. Change the label for one of the pod to env=uat and list all the pods to verify 
  kubectl label pod nginx-dev-1 env=uat --overwrite
  kubectl get pods --show-labels

12. Remove the labels for the pods that we created now and verify all the labels are removed 
    kubectl label pods -l 'env in (dev, prod, uat)' env-
    kubectl get pods --show-labels


13. Let’s add the label app=nginx for all the pods and verify (using kubectl) 
    kubectl label pods --all app=nginx
    kubectl get pods --show-labels

14. Get all the nodes with labels (if using minikube you would get only master node) 
    kubectl get nodes --show-labels

15. Label the worker node nodeName=nginxnode 
    kubectl label node <worker-node-name> nodeName=nginxnode

16. Create a Pod that will be deployed on the worker node with the label nodeName=nginxnode  
  Add the nodeSelector to the below and create the pod:
  apiVersion: v1 
  kind: Pod 
  metadata:   
    creationTimestamp: null   
    labels:    
      run: nginx  
    name: nginx 
  spec:   
    containers:   
    - image: nginx    
      name: nginx    
      resources: {}   
    dnsPolicy: ClusterFirst   
    restartPolicy: 
  Never status: {} 

answer : 

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
  nodeSelector:
    nodeName: nginxnode
status: {}

kubectl apply -f nginx-pod-node-selector.yaml


17. Verify the pod that it is scheduled with the node selector on the right node... fix it if it’s not behind scheduled. 
  kubectl get pod nginx -o wide
  kubectl delete pod nginx
  kubectl apply -f nginx-pod-node-selector.yaml

18. Verify the pod nginx that we just created has this label 
  kubectl get pod nginx --show-labels
